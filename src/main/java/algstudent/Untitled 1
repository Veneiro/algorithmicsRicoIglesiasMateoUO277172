//			if (!(x + 1 > (board.length / 2) - 1
//					|| (y + 1 > (board.length / 2) - 1))) {
//				board[x + 1][y + 1] = 1;
//				board[x + 1][y] = 1;
//				board[x][y + 1] = 1;
//			}
//			if (!(x + 1 > (board.length / 2) - 1
//					|| (y + 1 > (board.length / 2) - 1))) {
//				board[x - 1][y + 1] = 1;
//				board[x - 1][y] = 1;
//				board[x][y + 1] = 1;
//			}
//			if (!(x + 1 > (board.length / 2) - 1
//					|| (y + 1 > (board.length / 2) - 1))) {
//				board[x + 1][y - 1] = 1;
//				board[x + 1][y] = 1;
//				board[x][y - 1] = 1;
//			}
//			if (!(x + 1 > (board.length / 2) - 1
//					|| (y + 1 > (board.length / 2) - 1))) {
//				board[x - 1][y - 1] = 1;
//				board[x - 1][y] = 1;
//				board[x][y - 1] = 1;
//			}


if (x < board.length / 2) {
				if (y < board[0].length / 2) { //First Quadrant
					for (int i = 0; i < board.length; i++) {
						for (int j = 0; j < board.length; j++) {
							if(board[i][j] != board[x][y]) {
								board[i][j] = 2;
							}
						}
					}
				} else if (y >= board[0].length / 2) { //Third Quadrant
					for (int i = 0; i < board.length; i++) {
						for (int j = board.length; j < board.length; j++) {
							if(board[i][j] != board[x][y]) {
								board[i][j] = 3;
							}
						}
					}
				}
			} else if (x >= board.length / 2) {
				if (y < board[0].length / 2) { //Second Quadrant
					for (int i = board.length; i < board.length; i++) {
						for (int j = 0; j < board.length; j++) {
							if(board[i][j] != board[x][y]) {
								board[i][j] = 4;
							}
						}
					}
				} else if (y >= board[0].length / 2) { //Fourth Quadrant
					for (int i = board.length; i < board.length; i++) {
						for (int j = board.length; j < board.length; j++) {
							if(board[i][j] != board[x][y]) {
								board[i][j] = 5;
							}
						}
					}
				}
			}
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			///WORKS
			
			if (x < board.length / 2) {
				if (y < board[0].length / 2) { // First Quadrant
					board[board[0].length / 2][(board[0].length / 2) - 1] = 1;
					board[board[0].length / 2][board[0].length / 2] = 1;
					board[(board[0].length / 2) - 1][board[0].length / 2] = 1;
					trominoCounter++;
					doTromino(s / 2, (board[0].length / 2) - 2,
							(board[0].length / 2) - 2, this.x, this.y);
					doTromino(s / 2, (board[0].length / 2) - 2,
							board.length / 2, (board[0].length / 2) - 1,
							board.length / 2);
					doTromino(s / 2, board.length / 2,
							(board[0].length / 2) - 2, board.length / 2,
							(board[0].length / 2) - 1);
					doTromino(s / 2, board.length / 2, board.length / 2,
							board.length / 2, board.length / 2);
				} else if (y >= board[0].length / 2) { // Third Quadrant
					board[board.length / 2][(board[0].length / 2) - 1] = 1;
					board[(board[0].length / 2) - 1][(board[0].length / 2)
							- 1] = 1;
					board[board.length / 2][board.length / 2] = 1;
					trominoCounter++;
					doTromino(s / 2, (board[0].length / 2) - 2,
							board.length / 2, this.x, this.y);
					doTromino(s / 2, (board[0].length / 2) - 2,
							(board[0].length / 2) - 2,
							(board[0].length / 2) - 1,
							(board[0].length / 2) - 1);
					doTromino(s / 2, board.length / 2,
							(board[0].length / 2) - 2, board.length / 2,
							(board[0].length / 2) - 1);
					doTromino(s / 2, board.length / 2, board.length / 2,
							board.length / 2, board.length / 2);
				}
			} else if (x >= board.length / 2) { // Second Quadrant
				if (y < board[0].length / 2) {
					board[(board[0].length / 2) - 1][board[0].length / 2] = 1;
					board[board[0].length / 2][board[0].length / 2] = 1;
					board[(board[0].length / 2) - 1][(board[0].length / 2)
							- 1] = 1;
					trominoCounter++;
					doTromino(s / 2, board.length / 2,
							(board[0].length / 2) - 2, this.x, this.y);
					doTromino(s / 2, (board[0].length / 2) - 2,
							board.length / 2, (board[0].length / 2) - 1,
							board.length / 2);
					doTromino(s / 2, (board[0].length / 2) - 2,
							(board[0].length / 2) - 2,
							(board[0].length / 2) - 1,
							(board[0].length / 2) - 1);
					doTromino(s / 2, board.length / 2, board.length / 2,
							board.length / 2, board.length / 2);
				} else if (y >= board[0].length / 2) { // Fourth Quadrant
					board[(board[0].length / 2) - 1][(board[0].length / 2)
							- 1] = 1;
					board[board[0].length / 2][(board[0].length / 2) - 1] = 1;
					board[(board[0].length / 2) - 1][board[0].length / 2] = 1;
					trominoCounter++;
					doTromino(s / 2, board.length / 2, board.length / 2, this.x,
							this.y);
					doTromino(s / 2, (board[0].length / 2) - 2,
							board.length / 2, (board[0].length / 2) - 1,
							board.length / 2);
					doTromino(s / 2, board.length / 2,
							(board[0].length / 2) - 2, board.length / 2,
							(board[0].length / 2) - 1);
					doTromino(s / 2, (board[0].length / 2) - 2,
							(board[0].length / 2) - 2,
							(board[0].length / 2) - 1,
							(board[0].length / 2) - 1);
				}
			}
		}